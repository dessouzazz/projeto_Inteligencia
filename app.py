import asyncio
import os
import joblib
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import plotly.express as px
import lightgbm as lgb
import pandas as pd
import numpy as np
from geopy.distance import geodesic
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

from engine import criar_modelo

# Carregar os dados
sellers = pd.read_csv("dados/olist_sellers_dataset.csv")
geo = pd.read_csv("dados/olist_geolocation_dataset.csv")


    
# Configura√ß√£o inicial da p√°gina
st.set_page_config(page_title="Dashboard Olist", page_icon="üì¶", layout="wide")

# Base path
BASE_PATH = 'dados/'

# Cache para carregamento de dados
@st.cache_data
def load_data():
    orders = pd.read_csv(BASE_PATH + 'olist_orders_dataset.csv')
    customers = pd.read_csv(BASE_PATH + 'olist_customers_dataset.csv')
    reviews = pd.read_csv(BASE_PATH + 'olist_order_reviews_dataset.csv')
    geolocation = pd.read_csv(BASE_PATH + 'olist_geolocation_dataset.csv')
    order_items = pd.read_csv(BASE_PATH + 'olist_order_items_dataset.csv')
    products = pd.read_csv(BASE_PATH + 'olist_products_dataset.csv')
    categories = pd.read_csv(BASE_PATH + 'product_category_name_translation.csv')
    return orders, customers, reviews, geolocation, order_items, products, categories

# Carrega todos os datasets
orders, customers, reviews, geolocation, order_items, products, categories = load_data()

# Juntando pedidos com clientes
orders_customers = pd.merge(orders, customers, on='customer_id', how='inner')

# T√≠tulo do App
st.title("üìä Predi√ß√£o de Categoria de Produto no Varejo")

#### GERAR UM NOVO MODELO DE FORMA ASSINCRONA. 
if not os.path.exists('yuri_teste.joblib'):
    st.warning("üîÑ Modelo ainda n√£o treinado. Treinando agora...")
    
    # Executa fun√ß√£o ass√≠ncrona de forma segura
    asyncio.run(criar_modelo())
# Upload de CSV
uploaded_file = st.sidebar.file_uploader("üìÇ Fa√ßa upload de um CSV de produtos:", type="csv")
if uploaded_file:
    try:
        df_uploaded = pd.read_csv(uploaded_file)
        st.subheader("Visualiza√ß√£o da Base Carregada")
        st.dataframe(df_uploaded.head(10))
        st.markdown("---")
    except Exception as e:
        st.error(f"Erro ao ler o arquivo: {e}")

# Menu de navega√ß√£o
menu = st.sidebar.selectbox("Escolha uma visualiza√ß√£o:", [
    "Pedidos por Estado", 
    "Avalia√ß√µes por Categoria",
    "Mapa de Clientes",
    "Previs√£o de Entrega (IA)",
    "An√°lise Explorat√≥ria",
    "Dashboard"
])

# ======== VISUALIZA√á√ÉO 1: Pedidos por Estado ========
if menu == "Pedidos por Estado":
    pedidos_estado = orders_customers['customer_state'].value_counts().reset_index()
    pedidos_estado.columns = ['Estado', 'Total de Pedidos']

    fig = px.bar(pedidos_estado, x='Estado', y='Total de Pedidos',
                 color='Estado', title='Total de Pedidos por Estado')
    st.plotly_chart(fig)

# ======== VISUALIZA√á√ÉO 2: Avalia√ß√µes por Categoria ========
elif menu == "Avalia√ß√µes por Categoria":
    merged = reviews.merge(orders, on='order_id', how='inner') \
                    .merge(order_items, on='order_id', how='inner') \
                    .merge(products, on='product_id', how='inner') \
                    .merge(categories, on='product_category_name', how='left')

    nota_categoria = merged.groupby('product_category_name_english')['review_score'] \
                           .mean().sort_values(ascending=False).head(15)

    import plotly.express as px

    fig = px.bar(
    nota_categoria.sort_values(),  # Garantir ordem crescente
    x=nota_categoria.sort_values().values,
    y=nota_categoria.sort_values().index,
    orientation='h',
    text=nota_categoria.sort_values().values,
    labels={'x': 'Nota M√©dia', 'y': 'Categoria'},
    color_discrete_sequence=['#03A9F4'],  # Azul neon mais vibrante
    title='üìä M√©dia das Avalia√ß√µes por Categoria'
    )

    fig.update_traces(
    texttemplate='%{text:.2f}',
    textposition='outside',
    marker_line_color='white',
    marker_line_width=1.2
    )

    fig.update_layout(
    plot_bgcolor='#0d1117',  # fundo escuro elegante
    paper_bgcolor='#0d1117',
    font=dict(color='white', size=15),
    title_font=dict(size=22, color='white', family='Arial'),
    xaxis=dict(
        showgrid=True,
        gridcolor='#333333',
        zeroline=False,
        color='white'
        ),
    yaxis=dict(
        showgrid=False,
        color='white',
        tickfont=dict(size=13),
        ),
    margin=dict(l=180, r=50, t=60, b=40)
    )

    st.plotly_chart(fig, use_container_width=True)

# ======== VISUALIZA√á√ÉO 3: Mapa de Clientes ========
elif menu == "Mapa de Clientes":
    estados_selecionados = st.multiselect(
        'Selecione os estados:',
        options=sorted(geolocation['geolocation_state'].dropna().unique()),
        default=['SP', 'RJ']
    )
    mapa = geolocation[geolocation['geolocation_state'].isin(estados_selecionados)]

    mapa_renomeado = mapa.rename(columns={
        'geolocation_lat': 'latitude',
        'geolocation_lng': 'longitude'
    })

    fig = px.scatter_mapbox(
        mapa_renomeado,
        lat='latitude',
        lon='longitude',
        zoom=4,
        height=600,
        opacity=0.5,
        title='Distribui√ß√£o Geogr√°fica dos Clientes',
    )
    fig.update_layout(mapbox_style="open-street-map")
    st.plotly_chart(fig)

# ======== VISUALIZA√á√ÉO 4: Previs√£o de Entrega com IA ========
elif menu == "Previs√£o de Entrega (IA)":
    st.subheader("üîÆ Previs√£o Inteligente do Tempo de Entrega")

    modelo_salvo = joblib.load("yuri_teste.joblib")
    model = modelo_salvo['model']
    scaler = modelo_salvo['scaler']
    X_train = modelo_salvo['X_train']
    X_test = modelo_salvo['X_test']
    y_train = modelo_salvo['y_train']
    y_test = modelo_salvo['y_test']
    y_pred = model.predict(X_test)


    # Interface de Previs√£o
    st.markdown("### ‚úèÔ∏è Fa√ßa sua pr√≥pria previs√£o:")

    preco_input = st.number_input("Pre√ßo do produto (R$):", 10.0, 10000.0, 100.0, step=10.0)
    frete_input = st.number_input("Valor do frete (R$):", 0.0, 1000.0, 20.0, step=5.0)
    distancia_input = st.number_input("Dist√¢ncia estimada entre cliente e vendedor (km):", 0.0, 3000.0, 100.0, step=10.0)

    if st.button("üöö Prever tempo de entrega"):
        entrada = pd.DataFrame([{
            'log_preco': np.log1p(preco_input),
            'log_frete': np.log1p(frete_input),
            'distancia_km': distancia_input,
            'frete_pct': frete_input / preco_input
        }])

        entrada_scaled = scaler.transform(entrada)
        pred = model.predict(entrada_scaled)

        # M√©tricas
        r2 = r2_score(y_test, y_pred)
        mae = mean_absolute_error(y_test, y_pred)
        rmse = np.sqrt(mean_squared_error(y_test, y_pred))

        col1, col2, col3 = st.columns(3)
        col1.metric("üéØ R¬≤ Score", f"{r2:.2%}")
        col2.metric("üìâ MAE", f"{mae:.2f} horas")
        col3.metric("üìè RMSE", f"{rmse:.2f} horas")
        st.success(f"‚è±Ô∏è Tempo estimado de entrega: {int(np.round(pred[0]))} horas")

# ======== VISUALIZA√á√ÉO 5: An√°lise Explorat√≥ria ========
elif menu == "An√°lise Explorat√≥ria":
    st.subheader("üîç An√°lise Explorat√≥ria de Produtos")

    merged = order_items.merge(products, on='product_id', how='inner')
    merged = merged.merge(categories, on='product_category_name', how='left')

    vendas_categoria = merged.groupby('product_category_name_english')['price'].sum() \
        .sort_values(ascending=False).head(10)

    fig1 = px.bar(
        vendas_categoria,
        x=vendas_categoria.index,
        y=vendas_categoria.values,
        title='Top 10 Categorias por Faturamento',
        labels={'x': 'Categoria', 'y': 'Faturamento (R$)'}
    )
    st.plotly_chart(fig1)

    media_frete_categoria = merged.groupby('product_category_name_english')['freight_value'].mean() \
        .sort_values(ascending=False).head(10)

    fig2 = px.bar(
        media_frete_categoria,
        x=media_frete_categoria.index,
        y=media_frete_categoria.values,
        title='Top 10 Categorias por Custo M√©dio de Frete',
        labels={'x': 'Categoria', 'y': 'Frete M√©dio (R$)'}
    )
    st.plotly_chart(fig2)

    st.markdown("---")
    st.write("### Visualiza√ß√£o Completa dos Dados de Produtos")
    st.dataframe(merged.head(100))


# ======== Dashboard de M√©tricas ========
elif menu == "üìà Dashboard de M√©tricas e Previs√µes":
    st.header("üìà Dashboard de M√©tricas e Previs√µes do Modelo IA")

    try:
        modelo_salvo = joblib.load("yuri_teste.joblib")
        model = modelo_salvo['model']
        scaler = modelo_salvo['scaler']
        X_train = modelo_salvo['X_train']
        X_test = modelo_salvo['X_test']
        y_train = modelo_salvo['y_train']
        y_test = modelo_salvo['y_test']
        y_pred = model.predict(X_test)

        # M√©tricas
        r2 = r2_score(y_test, y_pred)
        mae = mean_absolute_error(y_test, y_pred)
        rmse = np.sqrt(mean_squared_error(y_test, y_pred))

        col1, col2, col3 = st.columns(3)
        col1.metric("üéØ R¬≤ Score", f"{r2:.2%}")
        col2.metric("üìâ MAE", f"{mae:.2f} horas")
        col3.metric("üìè RMSE", f"{rmse:.2f} horas")

        # Histograma de previs√µes
        fig_hist = px.histogram(y_pred, nbins=30, title="Distribui√ß√£o das Previs√µes de Entrega (em horas)")
        st.plotly_chart(fig_hist, use_container_width=True)

        # Gr√°fico real vs previsto
        fig_scatter = px.scatter(
            x=y_test, 
            y=y_pred,
            labels={'x': 'Tempo Real (h)', 'y': 'Tempo Previsto (h)'},
            title="üîç Comparativo: Tempo Real vs Previsto"
        )
        fig_scatter.add_shape(type="line", x0=y_test.min(), y0=y_test.min(), x1=y_test.max(), y1=y_test.max(),
                              line=dict(color="red", dash="dash"))
        st.plotly_chart(fig_scatter, use_container_width=True)

        # Previs√£o personalizada
        st.markdown("---")
        st.subheader("üî¢ Fa√ßa uma nova previs√£o manual:")

        preco_input = st.number_input("Pre√ßo do produto (R$):", 10.0, 10000.0, 100.0, step=10.0)
        frete_input = st.number_input("Valor do frete (R$):", 0.0, 1000.0, 20.0, step=5.0)
        distancia_input = st.number_input("Dist√¢ncia estimada entre cliente e vendedor (km):", 0.0, 3000.0, 100.0, step=10.0)

        if st.button("üì¶ Prever Tempo de Entrega"):
            entrada = pd.DataFrame([{
                'log_preco': np.log1p(preco_input),
                'log_frete': np.log1p(frete_input),
                'distancia_km': distancia_input,
                'frete_pct': frete_input / preco_input
            }])
            entrada_scaled = scaler.transform(entrada)
            pred_novo = model.predict(entrada_scaled)[0]
            print('Previsao - > ', pred_novo)
            st.success(f"Previs√£o: {pred_novo}")
            st.success(f"‚è±Ô∏è Tempo estimado de entrega: **{int(np.round(pred_novo))} horas**")

    except Exception as e:
        st.error(f"Erro ao carregar modelo ou gerar m√©tricas: {e}")

